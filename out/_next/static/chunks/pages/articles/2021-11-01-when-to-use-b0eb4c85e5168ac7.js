(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[723],{1668:(e,n,l)=>{"use strict";l.d(n,{R:()=>c});var s=l(4232);let i=s.createContext({});function c(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}},2852:(e,n,l)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/articles/2021-11-01-when-to-use",function(){return l(6588)}])},6588:(e,n,l)=>{"use strict";l.r(n),l.d(n,{default:()=>a,headlines:()=>h,meta:()=>t});var s=l(7876),i=l(1668),c=l(1723);let t={title:"useCallback / useMemo はどこから適用すべきなのか",createdDate:"2021/11/01",updatedDate:"2021/11/01",description:"React HooksのuseCallback/useMemoはいつ使うべきなのか。全部囲う場合とコストが高い対象だけを囲う場合のメリットをそれぞれ整理して、どういった運用をすべきかについて考えてみた。",tags:["React","JavaScript","Frontend"],imgPath:"/img/articles/AdobeStock_419025429.jpeg",bgImgPath:"/img/articles/bg/AdobeStock_419025429.jpeg"},h=[{title:"全部囲う場合のメリット",children:[]},{title:"コストが高い対象だけを囲う場合のメリット",children:[]},{title:"その他の判断要素",children:[]},{title:"結論",children:[]}],r=e=>{let{children:n}=e;return(0,s.jsx)(c.A,{meta:t,headlines:h,type:"post",children:n})};function d(e){let n={h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:["\n",(0,s.jsx)(n.p,{children:"React Hooks の useCallback/useMemo はいつ使うべきなのか。\n現場やネットでは「全て囲ってしまえ」という意見と「大きくコストがかかる場合だけ囲うべき」という意見で分かれている。"}),"\n",(0,s.jsx)(n.p,{children:"今回は全部囲う場合とコストが高い対象だけを囲う場合のメリットをそれぞれ整理して、どういった運用をすべきかについて考えてみた。"}),"\n",(0,s.jsx)(n.h2,{children:"全部囲う場合のメリット"}),"\n",(0,s.jsx)(n.h3,{children:"後で追加するのは大変"}),"\n",(0,s.jsx)(n.p,{children:"重くなってきたので後から追加となると、デグレが怖いし手間もかかる。"}),"\n",(0,s.jsx)(n.h3,{children:"FW の思想と合っている。"}),"\n",(0,s.jsx)(n.p,{children:"React の思想としてはデータの扱いはイミュータブルである事が前提となっている。"}),"\n",(0,s.jsx)(n.h3,{children:"どこからメモ化するべきか、迷うコストを削減出来る。"}),"\n",(0,s.jsx)(n.p,{children:"実装時に囲うべきか悩んだり、レビュー時に議論が発生してしまうのは無駄なコストである。"}),"\n",(0,s.jsx)(n.h2,{children:"コストが高い対象だけを囲う場合のメリット"}),"\n",(0,s.jsx)(n.h3,{children:"パフォーマンス向上"}),"\n",(0,s.jsx)(n.p,{children:"useCallback, useMemo によるコストの方が関数を作成するコストよりも大きくなる場合が多いため、何から何まで囲っていると多くの場合オーバーヘッドとなってしまう。"}),"\n",(0,s.jsx)(n.h3,{children:"可読性の向上"}),"\n",(0,s.jsx)(n.p,{children:"useCallback/useMemo で囲う分コードが冗長になり、可読性が下がる。"}),"\n",(0,s.jsx)(n.h3,{children:"バグの発生率を下げられる"}),"\n",(0,s.jsx)(n.p,{children:"実装時に deps の設定等のミスする可能性がある箇所を増やすことになる。\nただ公式推奨の ESlint の exhaustive-deps などを使えばミスは軽減できる"}),"\n",(0,s.jsx)(n.h2,{children:"その他の判断要素"}),"\n",(0,s.jsx)(n.p,{children:"useCallback/useMemo の使用がパフォーマンスに対して実際に悪影響となったというデータは見つけられない、特に話も聞かない。"}),"\n",(0,s.jsx)(n.h2,{children:"結論"}),"\n",(0,s.jsx)(n.p,{children:"プロダクトが巨大、もしくは今後大きくなっていく事が考えられる場合は全てメモ化するのはアリかも。\n理由としては以下が大きい。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"useCallback/useMemo の使用によりパフォーマンスへの悪影響が確認されたという情報が見つからない。"}),"\n",(0,s.jsx)(n.li,{children:"どのコンポーネントを囲うべきかを悩んだり、レビュー時に議論が発生するのはコストになってしまうため。"}),"\n",(0,s.jsxs)(n.li,{children:["重くなってきてから後で追加するのは大変。","\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)("br",{}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"とはいえ useCallback/useMemo 使用のコストが発生するのは各 Hooks のコードを読めば明らかである。\n選別する場合は以下のルール程度で行うのが良さそう。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"カスタムフックが返す関数は必ず useCallback で囲う"}),"\n",(0,s.jsx)(n.li,{children:"Memo 化された子コンポーネントに渡す関数の場合は必ず useCallback で囲う"}),"\n",(0,s.jsx)(n.li,{children:"「明らかに簡単な計算」でない場合は useMemo で囲う"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{children:"参照"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"https://zenn.dev/yoshiko/articles/32371c83e68cbe"}),"\n",(0,s.jsx)(n.li,{children:"https://qiita.com/seya/items/8291f53576097fc1c52a"}),"\n",(0,s.jsx)(n.li,{children:"https://blog.uhy.ooo/entry/2021-02-23/usecallback-custom-hooks/"}),"\n"]})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})})}}},e=>{var n=n=>e(e.s=n);e.O(0,[278,104,636,593,792],()=>n(2852)),_N_E=e.O()}]);